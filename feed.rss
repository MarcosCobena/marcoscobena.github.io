<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Marcos Cobeña Morián</title>
    <link>https://marcoscobena.com/</link>
    <description>Marcos' Blog</description>
    <managingEditor>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</managingEditor>
    <lastBuildDate>Fri, 23 Sep 2022 14:58:26 Z</lastBuildDate>
    <item>
      <link>https://marcoscobena.com/?i=git-interactively-rebase</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Por una git-arra con menos cuerdas</title>
      <description>&lt;p&gt;Imagínate: has terminado de trabajar en tu propia rama y llegó la hora de llevar todos los cambios a la rama de origen. ¿Qué sueles hacer en ese caso? Yo, hasta hace unos meses, hacía merge tal cual y listo. Todos los commits de mi rama temporal pasaban a la de origen. Y se añadía una "cuerda" más a la guitarra (trabajo en proyectos donde ni el propio Jimi Hendrix se hubiese apañado bien).&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/git-commits-flow.png" alt="" /&gt;
&lt;em&gt;Histórico de commits típico (&lt;a href="https://fork.dev/blog/posts/collapsible-graph/swift-show-all.png"&gt;fuente&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mi compañero de squad, Gabriel (¡gracias tío!), me llevó a la siguiente reflexión: ¿para qué quieres conservar todos los commits, no sería mejor agruparlos según el valor final para el proyecto? Un ejemplo: la rama feature/x, sacada de master, tiene los siguientes commits (más nuevos primero):
- fix
- add Wasm support
- wip&lt;/p&gt;

&lt;p&gt;¿Qué valor tiene fix, o wip, cuando termine mi feature/elimine mi rama? Quizá haya casos en los que sí pero, en la mayoría que me he encontrado personalmente, lo que realmente aporta valor es agrupar todos esos commits en uno único que se llame "add Wasm support": 1) los cambios están autocontenidos y 2) no añadimos una nueva cuerda.&lt;/p&gt;

&lt;p&gt;En mi caso uso Fork, y tan solo tienes que:
1. estando en tu rama, hacer click con el botón derecho sobre el commit de la cual nació;
2. seleccionar Interactively Rebase 'tu-rama' to Here...;
3. se abrirá un diálogo donde, de forma muy intuitiva, podrás jugar con los commits a gusto;
4. después tendrás que hacer force push (para sobreescribir tu rama en origin) y, finalmente,
5. desde la rama de origen, hacer pull con fast-forward&lt;/p&gt;

&lt;p&gt;Seguro que en otros clientes de Git es similar.&lt;/p&gt;

&lt;p&gt;Es complicado llegar al origen de un bug. Es complicado mantener a la vez varias releases en producción. Es complicado encontrar la aguja (commit) en un pajar (histórico). Con pequeños gestos como este nos hacemos todos la vida más fácil. Y podemos invertir el tiempo donde realmente aporta valor.&lt;/p&gt;</description>
      <pubDate>Thu, 22 Sep 2022 22:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=haz-tests</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Haz tests</title>
      <description>&lt;p&gt;&lt;strong&gt;Resumen:&lt;/strong&gt; haz tests. En vez de tanto depurar, haz un test. Cuando tengas un bug, reprodúcelo con un test (¡y corrígelo!) Yo he tardado diez años en darme cuenta, no te quieras parecer a mí en eso :-)&lt;/p&gt;

&lt;p&gt;Los tests son una herramienta para, de forma aislada, probar una porción de código. Hay de muchos tipos: integración, regresión, UI, etc., pero a todos les suele seguir la palabra unitarios, porque su objetivo es probar una única cosa. No quiero ser exhaustivo con ésto, me conformo con tests, a secas. De cómo hacer tests está lleno Internet de tutoriales, pero tampoco me quiero meter ahí. Si tienes interés en aprender a hacerlos seguro sabes cómo encontrarlos. Yo quiero que tengas interés.&lt;/p&gt;

&lt;h2&gt;Mirando a otro lado&lt;/h2&gt;

&lt;p&gt;La primera vez que supe de los tests fue en cuarto de carrera. En Ingeniería del Software (II, creo). Rafael Corchuelo nos daba esta asignatura. Yo tenía veintiún o veintidos años por entonces. El temario usaba una API de un banco ficticio para probar que sus llamadas devolvían lo que debían. Recuerdo que Rafael nos preguntó en clase qué diferencia había entre probar y demostrar, porque nuestro objetivo con los tests es probar.&lt;/p&gt;

&lt;p&gt;Nunca más volví a echar cuenta a los tests hasta los treinta y pico. Todos estos años he seguido teniendo a mi amigo Juanma Laó Ramos al lado, que sí vió la importancia de esto mucho más temprano, pero, como un impermeable al agua, pasé de largo sin mojarme. Creo que hace unos años tenía la [errónea] sensación de que los tests era una moda. Y no me quería unir a ella. Creía que un buen programador es aquel que vive por y para la programación, usa bytes en lugar de enteros para los bucles y escribía código críptico. Y yo me esforzaba por ser así.&lt;/p&gt;

&lt;p&gt;Si bien las cagadas que he tenido en estos años no se hubiesen subsanado 100% con tests, sí me hubiesen supuesto una gran ayuda para escribir software más sólido y más fácil de mantener para el siguiente (que, a veces, vuelvo a ser yo).&lt;/p&gt;

&lt;h2&gt;Una forma mejor de depurar&lt;/h2&gt;

&lt;p&gt;En DevsDNA nos propusimos leer un trozo de un libro, y comentarlo después. Alguien escogió &lt;a href="https://www.amazon.es/Software-Craftsman-Professionalism-Pragmatism-Robert-ebook/dp/B00QXAGIDO"&gt;A Software Craftsman, de Sandro Mancuso&lt;/a&gt;. Ahí leí por primera vez que los tests, como otra herramienta más para escribir software, era comparable a la depuración. Hoy día, casi todo lo que construímos es depurable fácilmente: pones un puntito rojo en la línea donde quieres detenerte, ejecutas la aplicación, la llevas hasta el punto que te interesa y ¡ta-chán!, puedes pasar el ratón por el código para ver el valor de las variables. No hace mucho atrás (o si has trabajado con los inicios de .NET en WebAssembly :-) ), tenías que usar &lt;code&gt;printf()&lt;/code&gt;. Es un salto cualitativo, ¿no?&lt;/p&gt;

&lt;p&gt;En el libro leí que la gente que usa tests, escogían estos a la depuración. ¿Cómo? Pero si escribir tests lleva su tiempo y poner un puntito es inmediato... El truco está en el punto de vista:
- los breakpoints son muy rápidos de poner (un click), pero llevar la app al estado que te interesa depende: puede que tengas suerte y quieras verificar algo nada más arrancar, o puede que tengas que iniciar sesión, navegar dos veces, esperar a una push que envías desde otro dispositivo, etc; los tests no son tan rápidos de escribir, pero llevar la app al estado que te interesa, ahora sí, es inmediato: ejecuta el test y listo;
- los breakpoints están en tu máquina, en tu IDE: ni llegan al repositorio, ni por tanto se mantienen en el tiempo, te valen solo a ti; los tests acaban en el repositorio, lo disfrutan los demás, el equipo, y se mantienen en el tiempo para no volver atrás (además, es otra forma de documentación)
- un breakpoint se pone una vez y depuras n veces; un test se escribe una vez y lo ejecutas n veces&lt;/p&gt;

&lt;p&gt;A veces, no podemos hacer un test: por ejemplo, quiero probar algo concreto de la plataforma, como me ocurre con Xamarin.Forms, y no tengo un entorno de testing donde echarlo a andar (que podría). Los tests no son la bala de plata, pero son una gran herramienta.&lt;/p&gt;

&lt;h2&gt;Sé que esto no funciona&lt;/h2&gt;

&lt;p&gt;Cuando comencé a hacer tests en aquellos proyectos donde no había ninguno, una sensación que tuve (y sigo teniendo) es lo poco agradable que es saber con certeza que tienes código que no funciona, aunque todavía no ha fallado en producción. Da hasta un poquito de miedo. Cuando no tenía tests, intuía que funcionaba, y no tenía ningún bug que me indicase lo contrario. Ahora sé, por mí mismo, que algo está mal.&lt;/p&gt;

&lt;p&gt;Creo que lidiar con esta sensación es un pequeño escalón que tenemos que superar si decidimos apostar por los tests. La felicidad de la ignorancia siempre será peor. Esto ocurre tanto en los tests como en la vida misma. Si no sabes que algo está roto, ¿cómo lo vas a corregir?&lt;/p&gt;

&lt;p&gt;Cuando vives al margen de los tests, programas por intuición: sé que esto ha funcionado hoy, intuyo que lo seguirá haciendo mañana. Si tu proyecto es muy muy pequeño, una demo, es poco costoso corroborar la intuición: vuelves a probar tú mismo todo, y listo. Pero con poco que se salga de ahí, estás jodido: no conozco a ningún programador que, al avanzar en un proyecto, siempre pruebe todos los casos de uso que, al menos él/la, ha desarrollado. Nadie hace esto. Bueno, sí, el cliente :-)&lt;/p&gt;

&lt;h2&gt;El placer de avanzar sobre suelo firme&lt;/h2&gt;

&lt;p&gt;Por otro lado, tocar una base de código y, al final, ver que todos los tests pasan en verde, es el aloe vera de la quemazón después de un día al sol. Sabes que, al menos, no te has cargado algunas partes del código. Si tienes suerte y hay tests de lo más primordial, tienes una buena probabilidad de haber construído sobre suelo firme.&lt;/p&gt;

&lt;p&gt;También puede ser la excusa perfecta: como los tests pasan en verde, todo funcionará a la perfección. ¡Eeerrooor! No nos vamos a ir al otro extremo tampoco, seamos razonables: la lectura correcta sería "lo que he tocado no ha roto lo que está probado". Y, ésto, es mucho. Si somos inteligentes y test-eamos los puntos más críticos, y si añadimos tests de regresión para que un bug no vuelva a ocurrir, tenemos una buena probabilidad de conservar el aprecio que un cliente puede llegar a tener sobre nosotros.&lt;/p&gt;

&lt;p&gt;Al final, y como dice Juanma, quiero ser feliz. Quiero que mis clientes, tengan más dinero o menos, sean más grandes o más pequeños, tengan una solución mejor a sus problemas hoy y, más importante, mañana. No pensar en el mañana es lo que me alejaba de hacer tests.&lt;/p&gt;</description>
      <pubDate>Tue, 18 May 2021 22:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=design-follows-logic</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Design follows logic</title>
      <description>&lt;p&gt;I have learnt it is way better to close logic before design when you are about to start a task.&lt;/p&gt;

&lt;p&gt;Imagine you need to create a log-in page. If you start laying the design out, it is possible to run out of time —from the estimation— and still the functionality is missing. If an user would need to use it, it is simply not there. However, if you start with logic and, run out of time, the user at least can solve her need, although it is not the most beautiful log-in she has seen. Both can then decide whether to invest some more time.&lt;/p&gt;

&lt;p&gt;Fist logic, business needs, Acceptance Criteria, functionality; second design, layout, style. Form follows function, not the other way around.&lt;/p&gt;</description>
      <pubDate>Mon, 15 Feb 2021 23:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=creativity-inc</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Creativity, Inc.</title>
      <description>&lt;p&gt;&lt;img src="items/images/CreativityInc.jpg" alt="Creativity, Inc. book cover" /&gt;
&lt;em&gt;&lt;a href="https://archive.org/details/creativityincove0000catm/"&gt;Creativity, Inc.: overcoming the unseen forces that stand in the way of true inspiration&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have read it as a Software Engineer, a programmer, convinced there are still plenty of problems to solve in our daily job. Also, as that boy who still remembers how was the day I watched Toy Story for the first time.&lt;/p&gt;

&lt;p&gt;Like them (Pixar), the software it-self is not the primary value, but what it actually generates on people who use it. They look for making people happier with their stories, we look for solving people's problems with our products, thus making them happier. And we are more or less good solving things inside the computer; however, we lack knowledge to solve those out of it.&lt;/p&gt;

&lt;p&gt;It has been trully inspiring for me. And, at the end, there is a beautiful gift for those who appreaciate Steve Jobs —and have read a few of his biographies.&lt;/p&gt;</description>
      <pubDate>Wed, 07 Oct 2020 22:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=la-solucion-al-reto-division-en-goto</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>La solución al reto: división en GOTO</title>
      <description>&lt;p&gt;&lt;strong&gt;Resumen:&lt;/strong&gt; tenemos una &lt;a href="goto-studio/?p=%3B%20Y%3DX1%2FX2%20X2%20must%20be%20%3E0%20Resto%20Z1%0A%5BA%5D%20X2%20%3D%20X2%20-%201%0AZ2%20%3D%20Z2%20%2B%201%0AZ4%20%3D%20Z4%20%2B%201%0AIF%20X2%20%21%3D%200%20GOTO%20%20A%0A%5BB%5D%20X1%20%3D%20X1%20-%201%0AZ4%20%3D%20Z4%20-%201%0AZ1%20%3D%20Z1%20%2B%201%0AIF%20X1%20%21%3D%200%20GOTO%20B%0AIF%20Z4%20%21%3D%200%20GOTO%20E%0A%5BC%5D%20Z1%20%3D%20Z1%20-1%0AX1%20%3D%20X1%20%2B%201%0AIF%20Z1%20%21%3D%200%20GOTO%20C%0A%5BD%5D%20Z2%20%3D%20Z2%20-%201%0AX1%20%3D%20X1%20-%201%0AX2%20%3D%20X2%20%2B%201%0AIF%20Z2%20%21%3D%200%20GOTO%20D%0AY%20%3D%20Y%20%2B%201%0AIF%20X1%20%21%3D%200%20GOTO%20A"&gt;solución&lt;/a&gt; al reto de Introducción a la Programación para Niños. He analizado el programa por partes y, además de estar hecho con cariño, hace todo tal y como pedí.&lt;/p&gt;

&lt;p&gt;El 27 de abril, me llegó un correo con una solución al reto de &lt;a href="?i=ipn"&gt;Introducción a la Programación para Niños&lt;/a&gt;. En este, pedía un programa que hiciese la operación Y = X1 / X2 y, como extra, en Z1 se almacenara el resto si la división no fuese entera.&lt;/p&gt;

&lt;p&gt;Quizá así se vea más claro:&lt;/p&gt;

&lt;p&gt;![Fórmula de la división](items/images/DivisionGOTO.png =459x101)
&lt;em&gt;Fórmula de la división: "dividendo entre divisor es igual a cociente más resto"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Me ha hecho tanta ilusión recibirlo que, me han entrado ganas de analizarlo, línea a línea. Comentándolo, como si hicésemos un &lt;em&gt;peer-review&lt;/em&gt; en el trabajo.&lt;/p&gt;

&lt;h2&gt;El programa&lt;/h2&gt;

&lt;p&gt;El e-mail venía con el programa tal que así:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
; Y=X1/X2 X2 must be &amp;gt;0 Resto Z1
[A] X2 = X2 - 1
Z2 = Z2 + 1
Z4 = Z4 + 1
IF X2 != 0 GOTO  A
[B] X1 = X1 - 1
Z4 = Z4 - 1
Z1 = Z1 + 1
IF X1 != 0 GOTO B
IF Z4 != 0 GOTO E
[C] Z1 = Z1 -1
X1 = X1 + 1
IF Z1 != 0 GOTO C
[D] Z2 = Z2 - 1
X1 = X1 - 1
X2 = X2 + 1
IF Z2 != 0 GOTO D
Y = Y + 1
IF X1 != 0 GOTO A
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Si quieres, puedes &lt;a href="goto-studio/?p=%3B%20Y%3DX1%2FX2%20X2%20must%20be%20%3E0%20Resto%20Z1%0A%5BA%5D%20X2%20%3D%20X2%20-%201%0AZ2%20%3D%20Z2%20%2B%201%0AZ4%20%3D%20Z4%20%2B%201%0AIF%20X2%20%21%3D%200%20GOTO%20%20A%0A%5BB%5D%20X1%20%3D%20X1%20-%201%0AZ4%20%3D%20Z4%20-%201%0AZ1%20%3D%20Z1%20%2B%201%0AIF%20X1%20%21%3D%200%20GOTO%20B%0AIF%20Z4%20%21%3D%200%20GOTO%20E%0A%5BC%5D%20Z1%20%3D%20Z1%20-1%0AX1%20%3D%20X1%20%2B%201%0AIF%20Z1%20%21%3D%200%20GOTO%20C%0A%5BD%5D%20Z2%20%3D%20Z2%20-%201%0AX1%20%3D%20X1%20-%201%0AX2%20%3D%20X2%20%2B%201%0AIF%20Z2%20%21%3D%200%20GOTO%20D%0AY%20%3D%20Y%20%2B%201%0AIF%20X1%20%21%3D%200%20GOTO%20A"&gt;probarlo en GoTo Studio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Además, también incluyó la codificación del mismo. Puedes introducirlo dígito a dígito en &lt;a href="goto-studio/"&gt;GoTo Studio&lt;/a&gt; (ver &lt;em&gt;Codify&lt;/em&gt;) pero, te recomiendo que lo copies y pegues, son &lt;em&gt;solo&lt;/em&gt; 11.445 dígitos (once mil cuatrocientos cuarenta y cinco, sí):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;

&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unas rápidas estadísticas del programa podrían ser:
- Número de instrucciones (sin contar comentarios): 17
- Variables usadas (al margen de Y como salida):
    - de entrada: X1, X2
    - auxiliares: Z1, Z2, Z3, Z4
- Etiquetas usadas (al margen de E): A, B, C, D&lt;/p&gt;

&lt;h2&gt;Vayamos por partes&lt;/h2&gt;

&lt;p&gt;A nivel lógico, el programa podríamos dividirlo en partes, según el objetivo concreto de cada una de ellas.&lt;/p&gt;

&lt;h3&gt;Parte uno&lt;/h3&gt;

&lt;p&gt;Estado inicial (aquellas variables que no aparecen se suponen 0): X1 y X2 con los valores proporcionados por el usuario.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
; Y=X1/X2 X2 must be &amp;gt;0 Resto Z1
[A] X2 = X2 - 1
Z2 = Z2 + 1
Z4 = Z4 + 1
IF X2 != 0 GOTO  A
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;En las primeras cuatro instrucciones, el programa mueve por completo el valor de X2 a Z2 y Z4, dejando X2 a 0. Recordemos que en X2, inicialmente, está el divisor. Por ejemplo: en la división 10 / 2, X2 contendría el valor 2. Después de ejecutarse la porción del programa, tanto Z2 como Z4 pasarían a valer 2, mientras que X2 valdría 0.&lt;/p&gt;

&lt;h3&gt;Parte dos&lt;/h3&gt;

&lt;p&gt;Estado inicial: X2 = 0, Z2 = X2, Z4 = X2.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
[B] X1 = X1 - 1
Z4 = Z4 - 1
Z1 = Z1 + 1
IF X1 != 0 GOTO B
IF Z4 != 0 GOTO E
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Aunque es similar en estructura a la parte uno, hay dos diferencias fundamentales:
1. X1 no se mueve a otras dos variables auxiliares, sino solo a Z1
2. A la misma vez, se hace la operación Z4 = Z4 - X1&lt;/p&gt;

&lt;p&gt;Al terminar esta parte, si Z4 no valiese 0 el programa terminaría (recordemos, E es una etiqueta especial, de salida). ¿En qué casos, entonces, terminaría el programa, para qué valores de X1 y X2 ocurriría esto? Vamos a estudiar las dos posibilidades:
- X1 &gt;= X2: en este caso, Z4 (que inicialmente contiene X2) siempre valdrá 0, pues en GOTO solo se trabaja con los números naturales, y la operación 0 - 1 siempre vale 0;
- X1 &amp;lt; X2: en esta ocasión, Z4 siempre será mayor que 0, por lo tanto distinto, por lo tanto terminará el programa&lt;/p&gt;

&lt;p&gt;Es fantástico porque esta solución, además, ha tenido en cuentra controlar que el dividendo sea mayor, o igual, que el divisor. Y, en caso contrario, al no haber manipulado Y todavía, esta valdría 0, con Z1 = X1, tal como pedí. ¡Buen trabajo!&lt;/p&gt;

&lt;h3&gt;Parte tres&lt;/h3&gt;

&lt;p&gt;Estado inicial, para X1 &amp;lt; X2: X1 = 0, X2 = 0, Z1 = X1, Z2 = X2, Z4 = X2 - X1.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
[C] Z1 = Z1 -1
X1 = X1 + 1
IF Z1 != 0 GOTO C
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Esta parte es muy sencillita: vuelve a mover el valor de Z1, que almacenaba X1, de vuelta a este.&lt;/p&gt;

&lt;h3&gt;Parte cuatro&lt;/h3&gt;

&lt;p&gt;Estado inicial: X2 = 0, Z2 = X2, Z4 = X2 - X1.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
[D] Z2 = Z2 - 1
X1 = X1 - 1
X2 = X2 + 1
IF Z2 != 0 GOTO D
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;En estructura, es muy similar a la parte dos, donde se aprovecha un mismo bucle para hacer dos operaciones a la vez: resta y suma. En esta ocasión:
- se resta el valor de Z2 (X2) a X1 (que seguía manteniendo su valor original): X1 = X1 - Z2 = X1 - X2; y
- se vuelca el mismo valor a X2, como se hacía con Z1 y X2 en la parte tres&lt;/p&gt;

&lt;p&gt;Podemos decir que es aquí, en esta parte, donde se hace el primer paso de la división, pues dividendo = dividendo - divisor y, el divisor sigue intacto.&lt;/p&gt;

&lt;h3&gt;Parte cinco&lt;/h3&gt;

&lt;p&gt;Estado inicial: X1 = X1 - X2, Z4 = X2 - X1.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Y = Y + 1
IF X1 != 0 GOTO A
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, se incrementa en 1 la Y, el cociente. En el caso de que X1, el divisor, aún no valga 0, todavía podemos seguir con la división, por lo que se vuelve a A, justo la primera instrucción de todas.&lt;/p&gt;

&lt;h2&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Cuando aprendemos a multiplicar, de pequeños, nos explican que no es más que sumar varias veces. Del mismo modo, dividir no es más que restar. Este programa hace justo eso, restar; tantas veces como el dividendo siga siendo mayor o igual que el divisor, y contar cuántas veces se hace esa resta. Además, cuando ya no es posible restar más, también se almacena ese resto. ¡Hace todo lo que se pedía!&lt;/p&gt;

&lt;p&gt;Que lo haya analizado por partes ha sido algo natural, debido a lo bien organizado que está el código:
- las etiquetas se usan en orden alfabético, lo que ayuda a un humano a seguir el código; y
- las variables auxiliares corresponden en índice con aquella con la que comparte el valor: Z1 para X1 y Z2 para X2&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dedicado a mi cuñada (y a mi cuñado, que es de letras pero puso su granito de arena también): muchísimas gracias por el esfuerzo y, ¡enhorabuena por conseguirlo!&lt;/em&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 08 May 2020 22:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=ipn</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Introducción a la Programación para Niños</title>
      <description>&lt;p&gt;&lt;strong&gt;Actualización 9/5:&lt;/strong&gt; ¡Tenemos solución al reto! Echa un ojo abajo, en la clase 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actualización 28/3:&lt;/strong&gt; acabo de publicar el vídeo y el documento de la segunda, y última, clase :-) Al comienzo de ambos están las soluciones (¡algunas de ellas, hay muchas!) a los ejercicios de la clase anterior. ¿Serás capaz de resolver el reto? 8-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actualización 21/3:&lt;/strong&gt; ¡ya tenéis el vídeo de la primera clase publicado! Justo abajo, en Temario, Clase 1. Además, también he puesto el enlace para la clase del próximo sábado :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actualización 20/3:&lt;/strong&gt; ya está abajo, junto a la fecha de la 1ª clase, la dirección para conectarte mañana. Finalmente usaremos Skype: el otro día no sabía que YouTube no permite de forma sencilla mostrar la pantalla del organizador. Skype tiene un límite de 50 personas, no creo que lo superemos; pero, por si acaso, grabaré la sesión en vídeo y, mañana mismo, la publicaré aquí para quien quiera verla de nuevo, o tuvo cualquier problema. ¡Acordaos del papel y lápiz!&lt;/p&gt;

&lt;p&gt;¡Hola! :-) Me llamo Marcos y soy un programador que vive en Sevilla. Con la necesidad de quedarnos unos días sin salir de casa, se me ha ocurrido organizar este pequeño curso para entretener a los más pequeños de la casa.&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/HOW-BRITAIN-ADOPTED-THE-HOME-COMPUTER-OF-THE-1980s-1170x780.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Niños en los años 80 alrededor de un ordenador de la época (imagen sacada de &lt;a href="https://thecodeshow.info/how-britain-adopted-the-home-computer-of-the-1980s/"&gt;aquí&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Todos los niños saben qué es un móvil, saben manejarlos (a veces incluso mejor que nosotros) pero, ¿saben qué hay dentro? Y, sobre todo, ¿cómo puede uno decirle al móvil que haga lo que yo quiera? De ésto último trata la programación: cómo expresarle al móvil, a un ordenador, qué tiene que hacer paso a paso.&lt;/p&gt;

&lt;p&gt;GOTO ("IR A" en español) es un lenguaje muy muy sencillote; taaan sencillote, que solo trabaja con numeritos: el 1, el 28, etc. ¡Pero se pueden hacer cosas muy chulas con él! Juntos, padres e hijos (y abuelos :-) ), aprenderemos a hacer pequeños programas en GOTO, que en la 2ª clase podremos incluso probar en el ordenador, el móvil o la tablet.&lt;/p&gt;

&lt;p&gt;Cuando era pequeño, mis amigos y yo escribíamos programas en las libretas del colegio y, cuando nos sentábamos delante del ordenador, los tecleábamos por completo para poder probarlos. He querido reflejar esa misma idea aquí: en la 1ª clase no tocaremos el ordenador, solo necesitaremos papel y lápiz y ¡darle al coco! Ya en la 2ª clase, probaremos nuestros programas a ver qué tal se comportan :-)&lt;/p&gt;

&lt;p&gt;¡Apúntate, será muy divertido!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clase 1:&lt;/strong&gt; sábado, 21 de marzo, a las 11:00 (hora española), 1 h de duración

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Abajo encontrarás tanto el vídeo como el material&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clase 2:&lt;/strong&gt; sábado, 28 de marzo, a las 11:00 (hora española), 1 h de duración

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Abajo encontrarás tanto el vídeo como el material&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Temario&lt;/h2&gt;

&lt;h3&gt;Clase 1&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Mamá, Papá, ¿qué tiene el móvil por dentro?&lt;/li&gt;
&lt;li&gt;¿Cómo piensa un ordenador?&lt;/li&gt;
&lt;li&gt;¿Qué idioma/lenguaje hablan los ordenadores?&lt;/li&gt;
&lt;li&gt;El lenguaje de programación GOTO&lt;/li&gt;
&lt;li&gt;Nuestro primer programa en GOTO&lt;/li&gt;
&lt;li&gt;Ejercicios para la próxima clase&lt;/li&gt;
&lt;/ol&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/g1ToSnhQKJc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;El documento que he usado como presentación está &lt;a href="items/documents/IPN-Clase1.pdf"&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Clase 2&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;El entorno de programación GoTo Studio

&lt;ol&gt;
&lt;li&gt;Cómo probar tus programas&lt;/li&gt;
&lt;li&gt;Cómo depurar tus programas&lt;/li&gt;
&lt;li&gt;Cómo compartir tus programas&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Macros para no escribir una y otra vez lo mismo&lt;/li&gt;
&lt;li&gt;Reto: ¿qué eres capaz de programar con GOTO?&lt;/li&gt;
&lt;/ol&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_4H7g4i3Trg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;El documento que he usado como presentación está &lt;a href="items/documents/IPN-Clase2.pdf"&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Reto&lt;/h4&gt;

&lt;p&gt;Aquí pondré las soluciones que reciba (puedes encontrar el enunciado del mismo tanto en el vídeo, como en el documento, de justo arriba):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Anónimo: &lt;a href="goto-studio/?p=%3B%20Y%3DX1%2FX2%20X2%20must%20be%20%3E0%20Resto%20Z1%0A%5BA%5D%20X2%20%3D%20X2%20-%201%0AZ2%20%3D%20Z2%20%2B%201%0AZ4%20%3D%20Z4%20%2B%201%0AIF%20X2%20%21%3D%200%20GOTO%20%20A%0A%5BB%5D%20X1%20%3D%20X1%20-%201%0AZ4%20%3D%20Z4%20-%201%0AZ1%20%3D%20Z1%20%2B%201%0AIF%20X1%20%21%3D%200%20GOTO%20B%0AIF%20Z4%20%21%3D%200%20GOTO%20E%0A%5BC%5D%20Z1%20%3D%20Z1%20-1%0AX1%20%3D%20X1%20%2B%201%0AIF%20Z1%20%21%3D%200%20GOTO%20C%0A%5BD%5D%20Z2%20%3D%20Z2%20-%201%0AX1%20%3D%20X1%20-%201%0AX2%20%3D%20X2%20%2B%201%0AIF%20Z2%20%21%3D%200%20GOTO%20D%0AY%20%3D%20Y%20%2B%201%0AIF%20X1%20%21%3D%200%20GOTO%20A"&gt;programa&lt;/a&gt;. He analizado esta solución &lt;a href="?i=la-solucion-al-reto-division-en-goto"&gt;aquí&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Preguntas frecuentes&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;¿Qué necesito para seguir el curso?&lt;/strong&gt;
Un ordenador, o una tablet, con acceso a Internet —un móvil también vale, pero se ve todo muy chiquitito, no es del todo cómodo; sí que podrás después probar tus propios programas en el móvil :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¿Qué precio tiene el curso?&lt;/strong&gt;
Nada, es gratis. Además, el lenguaje GOTO y las herramientas que usaremos también son gratis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¿Eres profesor o tienes formación similar de algún tipo?&lt;/strong&gt;
No, lo siento: soy Ingeniero en Informática por la Universidad de Sevilla, y me dedico profesionalmente a programar, desarrollar software, en una consultora española. Pero me gusta eso de dar clases, siempre me ha llamado la atención :-) Puedes verme haciendo algo similar &lt;a href="/?i=conferences"&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¿Hay mínimo de edad?&lt;/strong&gt;
Por mi parte, no. El lenguaje GOTO solo suma y resta, no hace más, por lo que si el/la niño/a sabe sumar y restar creo que será suficiente.&lt;/p&gt;</description>
      <pubDate>Fri, 08 May 2020 22:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=wave-engine-web-performance</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Wave Engine Web performance</title>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; We've analyzed why Wave Engine Web performance decreases under high WebGL consuming pressure, arriving to the final conclusion the way we currently interop with JavaScript is too slow for us. Finally, we introduce how we're overcoming this situation.&lt;/p&gt;

&lt;h2&gt;"Wave Engines goes slow in Web"&lt;/h2&gt;

&lt;p&gt;That's the idea we all have had since started to make Wave work in Web but, didn't have analyzed it until recently. Since I have notion of Java or .NET, this' always scared everyone programming against a Virtual Machine (VM). However, the daily reality has revealed once and again, at least for me, the loss of performance isn't such a big concern; and when it's, I think more of an issue with my code than being the VM guilty for that. I just can code things better, I think.&lt;/p&gt;

&lt;p&gt;Sadly, that hasn't happened with WebAssembly (Wasm) —well, .NET running on Wasm. If you open &lt;a href="http://gltf.waveengine.net/?model=https%3A%2F%2Fraw.githubusercontent.com%2FKhronosGroup%2FglTF-Sample-Models%2Fmaster%2F2.0%2FBuggy%2FglTF-Binary%2FBuggy.glb"&gt;this URL&lt;/a&gt; your PC will quickly ask for a new CPU and 2 or 4 extra GB of RAM, if not for a deep dive into cold water (depending on your location).&lt;/p&gt;

&lt;p&gt;David Ávila, one of my workmates, had the intuition the issue was the interop cost with JavaScript, but I endlessly repeated him I had no numbers to argue, against or not, such. With the time going by, I feel more uncomfortable by stating things without having numbers to back such up: I've seen my-self &lt;em&gt;so&lt;/em&gt; many times thinking the issue was A, when actually was B.&lt;/p&gt;

&lt;h2&gt;Two problems&lt;/h2&gt;

&lt;p&gt;One week or two ago our manager Javi Cantón let us spend some time researching how to make things go faster and, I convinced him to first understand where the culprit actually is. Together, we recorded some sessions with SpectorJS, from both &lt;a href="http://gltf.waveengine.net/"&gt;Wave Engine's glTF viewer&lt;/a&gt; and &lt;a href="https://sandbox.babylonjs.com/"&gt;BabylonJS' Sandbox&lt;/a&gt;, using the same &lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/blob/master/2.0/Buggy/glTF-Binary/Buggy.glb"&gt;model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spector.babylonjs.com/"&gt;SpectorJS&lt;/a&gt; is one of the few available tools to hook WebGL calls nowadays —I've tried the RenderDoc approach in Chrome with no luck; among others— and let you save the sessions in JSON format, which self-invites someone like me to write something to pull statistics from :-) (I've remembered working with another mate, Pablo Íñigo, who always tends to write tools to solve issues; I think have learnt this from him, am another "tool-oriented guy".)&lt;/p&gt;

&lt;p&gt;To make the comparisson fair enough —and sorry in advance because in terms on benchmarking I've probably bypassed a few recommendations— we recorded exactly 1 frame, expecting every WebGL command between 2 drawing calls.&lt;/p&gt;

&lt;p&gt;Maybe I spent 1 or 2 hours writting SpectorJSCaptureAnalyzer, as I named it; but, a simple Console project which basically accumulates every command made, started to return really usefull insights.&lt;/p&gt;

&lt;h3&gt;Amount of commands&lt;/h3&gt;

&lt;p&gt;This' the output for BabylonJS:&lt;/p&gt;

&lt;p&gt;```
bindVertexArray (181): 1,039794921875 ms
bindBufferBase (149): 0,94140625 ms
uniformMatrix4fv (118): 0,85498046875 ms
drawElements (118): 0,829833984375 ms
bufferSubData (31): 0,454833984375 ms
useProgram (53): 0,304443359375 ms
bindBuffer (62): 0,27880859375 ms
drawElementsInstanced (31): 0,189697265625 ms
clear (1): 0,02001953125 ms
viewport (1): 0,005126953125 ms
clearStencil (1): 0,0048828125 ms
enable (1): 0,0048828125 ms
clearColor (1): 0 ms
clearDepth (1): 0 ms
disable (1): 0 ms&lt;/p&gt;

&lt;p&gt;Total (750): 4,9287109375 ms (0,0049287109375 s)&lt;/p&gt;

&lt;p&gt;One frame at 60 FPS lengths 16,666666 ms (0,016666666 s), so
current total would generate 202,8928076084803 FPS
```
&lt;em&gt;BabylonJS-Buggy-OneFrame.json (~59 FPS)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;; and this the one for Wave:&lt;/p&gt;

&lt;p&gt;```
texParameteri (7552): 22,98095703125 ms
getExtension (944): 8,7890625 ms
bindBufferBase (1890): 7,427734375 ms
bindTexture (1888): 7,3662109375 ms
bindBuffer (1396): 5,51416015625 ms
texParameterf (1888): 5,268798828125 ms
uniform1i (944): 4,046142578125 ms
vertexAttribPointer (944): 3,690673828125 ms
enableVertexAttribArray (944): 3,38037109375 ms
activeTexture (944): 2,61767578125 ms
bindBufferRange (470): 2,58203125 ms
drawElements (472): 2,561767578125 ms
bufferSubData (7): 0,215087890625 ms
clear (4): 0,03515625 ms
clearDepth (2): 0,01513671875 ms
depthMask (2): 0,014892578125 ms
clearColor (2): 0,010009765625 ms
clearStencil (2): 0,010009765625 ms
scissor (2): 0,005126953125 ms&lt;/p&gt;

&lt;p&gt;Total (20297): 76,531005859375 ms (0,076531005859375 s)&lt;/p&gt;

&lt;p&gt;One frame at 60 FPS lengths 16,666666 ms (0,016666666 s), so
current total would generate 13,066599462151204 FPS
```
&lt;em&gt;WaveEngine-Buggy-OneFrame2.json (~1 FPS)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The first punch in my face was the total amount of commands made: 750 in BabylonJS vs. 20297 in Wave. It's 27x times more commands we make against Babylon! Crazy. Just before breaking my Computer Science degree into small pieces, thanks God I noticed one subtle difference: why do we have 2 &lt;code&gt;clearColor()&lt;/code&gt; calls instead of just 1, as Babylon does? One frame should suffice with just 1 clear command...&lt;/p&gt;

&lt;p&gt;Then some words from again David came into my mind: "guys take care with having more than one camera as they all get rendered". That basically means Wave doesn't differentiate whether you actually wanted to draw 2 cameras at the same time: you may want to have a scene in background and an overlay on top, for instance. It's a very common practice with 2D UIs in games: you're killing enemies in your favourite FPS and see in 2D on top your actual life, weapon, etc. Those are 2 cameras being rendered at the same time.&lt;/p&gt;

&lt;p&gt;Well, all this' so beautiful but, our glTF viewer has no need for 2 cameras; so, after digging a few seconds within the code, I confirmed it: I was rendering 2 cameras, yes. Quickly fixed it and took a new session:&lt;/p&gt;

&lt;p&gt;```
texParameteri (3776): 12,076171875 ms
getExtension (472): 4,739990234375 ms
bindTexture (944): 3,7275390625 ms
bindBufferBase (945): 3,667236328125 ms
texParameterf (944): 3,400390625 ms
bindBuffer (699): 3,30029296875 ms
vertexAttribPointer (472): 2,2255859375 ms
uniform1i (472): 2,025634765625 ms
enableVertexAttribArray (472): 1,82958984375 ms
activeTexture (472): 1,620361328125 ms
drawElements (236): 1,28564453125 ms
bindBufferRange (235): 1,279052734375 ms
bufferSubData (4): 1,03515625 ms
clear (2): 0,02490234375 ms
clearDepth (1): 0,005126953125 ms
clearColor (1): 0,0048828125 ms
clearStencil (1): 0,0048828125 ms
depthMask (1): 0,0048828125 ms&lt;/p&gt;

&lt;p&gt;Total (10149): 42,25732421875 ms (0,04225732421875 s)&lt;/p&gt;

&lt;p&gt;One frame at 60 FPS lengths 16,666666 ms (0,016666666 s), so
current total would generate 23,664536704297287 FPS
```
&lt;em&gt;WaveEngine-Buggy-OneFrame3.json&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, exactly half the amount of calls than before, like it was expected. With these better numbers, we make 10149 / 750 = ~14x more calls than Babylon, which's still huge.&lt;/p&gt;

&lt;p&gt;I'm not an OpenGL guy, and my knowledge is quite limited in this sense. I've recently learned what instancing is, and what a VBO (Vertex Buffer Object) is, but don't have a further notion of the rendering pipeline happening underneath.&lt;/p&gt;

&lt;p&gt;Guided by my friend Javi Cantón, I can see we're making 236 &lt;code&gt;drawElements()&lt;/code&gt; calls, while Babylon does 118 &lt;code&gt;drawElements()&lt;/code&gt; + 31 &lt;code&gt;drawElementsInstanced()&lt;/code&gt; = 149. Then I can think of Babylon having infrasctructure to apply instancing where appropiate, which not only reduces the amount of commands but also takes advantage of the GPU. I can see we call &lt;code&gt;texParameteri()&lt;/code&gt; 3776 times (3776 / 236 draw calls = 16 times/draw call) while Babylon makes 0, surely because such are made at the beginning and aren't needed anymore after.&lt;/p&gt;

&lt;p&gt;In conclusion, we can do a better job in our OpenGL backend. You'll see the &lt;a href="https://www.fuget.org/packages/WaveEngine.OpenGL.Common/"&gt;WaveEngine.OpenGL.Common NuGet&lt;/a&gt; in the OpenGL launchers, as it serves both OpenGL/ES and WebGL, and it's exactly there where there's room for improvement. Truth be told, there's already a feature branch in our repo with some improvements made in that direction, and we've gained some FPS already, but still need to assure it works in every visual test. We've frozen this effort because of what have found bellow.&lt;/p&gt;

&lt;h3&gt;Time consumed&lt;/h3&gt;

&lt;p&gt;The statistics generated by my small tool also sum the amount of time taken per command, finally adding everything to calc how many FPS can be expected. That's not 100% exact as any engine not only consumes time with graphic calls, but in the rest of logic stuff: updating components, for instance. But it's a way to compare the actual frame rate (SpectorJS reports it within its toolbar menu) with the expected one, between Wave and Babylon.&lt;/p&gt;

&lt;p&gt;|             | Time (ms) | Expected FPS | Actual ~FPS |
| ----------- |:---------:|:------------:|:-----------:|
| Wave Engine | 42,26     | 23,66        | 1           |
| BabylonJS   | 4,93      | 202,89       | 59          |&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Table comparing time consumed in 1 frame. Numbers are rounded by 2 decimals&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I made every test under Chrome, where haven't disabled the framerate limit of 60 FPS. This explains why Babylon is up to the limit, with ~59, but surely could do better if the browser wouldn't limit such. However, Wave reports barely 1 FPS, although we could expect almost 24.&lt;/p&gt;

&lt;p&gt;I've still not talked about how we're running the .NET runtime under Wasm. Until here, I've made every test in interpreter mode, which's the lowest option in terms of performance. Every instruction of the .NET VM is interpreted in Wasm, without any sort of cache (like the JITter does).&lt;/p&gt;

&lt;p&gt;Our mate Javier Carnero has been working heavily on researching the AOT scenario, in which percentage it can be of help for us, but I'll let him share —if he wants obviously!— his findings. I'll just say AOT isn't the gold key we're looking for &lt;strong&gt;here&lt;/strong&gt;, so we must keep looking for other paths.&lt;/p&gt;

&lt;p&gt;If we have a really low framerate compared to the theoretical values, if AOT can't help us to overcome this situation, what's then happening here? Reached this point, I decided to move one step down and analyze timings at the &lt;a href="https://github.com/WaveEngine/WebGL.NET/"&gt;WebGL.NET&lt;/a&gt; layer. &lt;/p&gt;

&lt;h2&gt;WebGL.NET costs&lt;/h2&gt;

&lt;p&gt;I wanted to compare just one single thing: how much time lengths exactly when calling WebGL commands through JavaScript from 1) the .NET Runtime perspective and 2) the JavaScript Runtime one. I already had 2) thanks to above reports, where each WebGL command also shows the time consumed in total, from the JavaScript side.&lt;/p&gt;

&lt;p&gt;For 1), I added a &lt;code&gt;Stopwatch&lt;/code&gt; exactly here:
```csharp
protected object Invoke(string method, params object[] args)
{
    var actualArgs = Translate(args);
    // Between here...
    var result = gl.Invoke(method, actualArgs);
    // ... and here
    DisposeArrayTypes(actualArgs);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (IsVerbosityEnabled)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```
&lt;em&gt;The WebGL.NET backend which finally calls JavaScript to execute the WebGL &lt;code&gt;method&lt;/code&gt; with params &lt;code&gt;args&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;; and another one at the very beginning and end of the above same method, because I was somewhat worried the hand-made marshalling could cause some bottleneck. I made these tests over &lt;a href="https://webgldotnet.surge.sh/"&gt;the samples gallery&lt;/a&gt;, where we have control on the rendering loop. I added some logic to run exactly 600 frames, breaking the app just after. Such amount of frames would let me calc some averages and hopefully avoid the initial cold states.&lt;/p&gt;

&lt;p&gt;In the end, I got hundreds of tuples with those 2 times. With a handy bunch of &lt;code&gt;Console.WriteLine()&lt;/code&gt; calls, it generated a large CSV output which Excel would leverage. I trusted my 1.5 years working in front of Excel with backlogs, costs and so on, would let me quickly get a few beautiful charts 8-)&lt;/p&gt;

&lt;p&gt;And that way it was! This' the first chart:&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/AverageDotNETVSJavaScriptDurations.png" alt="Chart: Average .NET vs. JavaScript durations" /&gt;
&lt;em&gt;Chart: Average .NET vs. JavaScript durations&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My interpretation of this chart is quite simple: since the orange path is almost always on top of the blue one, most of the time consumed on a WebGL call is gone exactly in doing that —remember: everything in the .NET Runtime land, for now. Except for 2 or 3 commands where we could gain a good amount of time by improving our marshalling, it seems to make no sense investing time on this.&lt;/p&gt;

&lt;p&gt;Then, I built another chart (the last one):&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/AverageRatioJSDotNET.png" alt="Chart: Average ratio JS/.NET" /&gt;
&lt;em&gt;Chart: Average ratio JS/.NET&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basically it's the first chart represented as a ratio between the 2 values: this way we can easily see the percentage gone in the JavaScript interop. Except for the commands I mentioned above, we could say ~80% of the time consumed by our WebGL.NET backend is due to the low-level JavaScript calls, so it leaves us only 20% of improvement. I don't think 20% is low enough to don't think of improving it; I just think the actual time taken by commands —as reported by SpectorJS with the recorded sessions— is &lt;em&gt;much&lt;/em&gt; lower than the one we can see here.&lt;/p&gt;

&lt;h3&gt;JSObject.Invoke()&lt;/h3&gt;

&lt;p&gt;If by example we continue with &lt;code&gt;clearColor()&lt;/code&gt;, it took 0,0048828125 ms in the Wave session —again: it's the time taken &lt;em&gt;only&lt;/em&gt; in JavaScript. When looking at the same command at above charts (the first one exactly, although you can't see it because didn't get rendered in the graph) it took 0,079018124 ms of average. 0,079018124 / 0,0048828125 = 16,18 times slower making such call from .NET than in pure JavaScript. And I've seen also such ratio growing up to 20 times as well.&lt;/p&gt;

&lt;p&gt;Here's where the big issue is: calling JavaScript code from .NET through &lt;a href="https://github.com/mono/mono/tree/master/sdks/wasm/framework/src/WebAssembly.Bindings"&gt;Mono's WebAssembly.Bindings&lt;/a&gt; NuGet doesn't offer the performance we need. It's feasible for ocasional calls, where you won't notice such impact, but not for stuff like ours, with hundreds or thousands calls per second. We need to consume WebGL in a much faster way.&lt;/p&gt;

&lt;h2&gt;Emscripten will bring some light&lt;/h2&gt;

&lt;p&gt;Two weeks ago my mate Javier Carnero and I started researching dynamic &amp;amp; static linking approaches at Emscripten level, directly. After seeing &lt;a href="https://wasm.continuation-labs.com/d3demo/"&gt;Doom 3&lt;/a&gt;, &lt;a href="http://xproger.info/projects/OpenLara/"&gt;Tomb Raider&lt;/a&gt;, &lt;a href="https://bellard.org/jslinux/vm.html?url=https://bellard.org/jslinux/win2k.cfg&amp;amp;mem=192&amp;amp;graphic=1&amp;amp;w=1024&amp;amp;h=768"&gt;Windows 2000&lt;/a&gt;, etc., high-performance ports of software pieces, running well through Emscripten, we think there must exist a better way to interop.&lt;/p&gt;

&lt;p&gt;The linking approaches would let us P/Invoke C functions, compiled into Wasm, from .NET, expecting to be faster than going through JavaScript. Actually, JavaScript is never left aside, as Emscripten ports of OpenGL/ES libraries are actually wrappers around JavaScript/WebGL. However, this way we remove the trampoline from .NET to JavaScript, with all the manual marshalling needed, by letting Emscripten handle all this for us.&lt;/p&gt;

&lt;p&gt;Lin Clark wrote, in late 2018, &lt;a href="https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast-%F0%9F%8E%89/"&gt;a beautiful article&lt;/a&gt; on how they improved JavaScript &amp;amp; Wasm communication in Firefox. Jérôme Laban's recently &lt;a href="https://jaylee.org/archive/2020/03/22/csharp-interop-with-c-cpp-and-rust-in-webassembly.html"&gt;written&lt;/a&gt; too on how P/Invoking Rust and C code from .NET-Wasm, where already alerts on the performance aspect.&lt;/p&gt;

&lt;p&gt;When we had an initial render loop working, with promising times, Javi Cantón had an idea which would shift our route: could we reuse the existing &lt;a href="https://www.fuget.org/packages/WaveEngine.OpenGL/"&gt;WaveEngine.OpenGL NuGet&lt;/a&gt; with Emscripten's EGL &lt;code&gt;getProcAddress()&lt;/code&gt; call? And here we are, but this' stuff for another post.&lt;/p&gt;

&lt;h2&gt;Thanks&lt;/h2&gt;

&lt;p&gt;To my workmates from Plain Concepts' Seville office for their help, in one way or another, with Wave Engine Web. Specially, the core team working in Wave Engine. More specifically, Dani Cáceres recommended me some approaches to improve WebGL.NET performance, like having multiple &lt;code&gt;Invoke()&lt;/code&gt; overloads per amount of params, instead of using &lt;code&gt;params object[] args&lt;/code&gt;.&lt;/p&gt;</description>
      <pubDate>Sat, 25 Apr 2020 22:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=wave-engines-on-line-gltf-viewer</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Wave Engine's on-line glTF viewer</title>
      <description>&lt;p&gt;&lt;em&gt;(This post appeared first &lt;a href="https://geeks.ms/waveengineteam/2020/02/06/wave-engines-on-line-gltf-viewer/"&gt;here&lt;/a&gt; on February 6th, 2020)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: We are announcing our experimental glTF on-line viewer made with Wave Engine 3.0, powered by WebAssembly. Try the demo! &lt;a href="http://gltf.waveengine.net" rel="noopener" target="_blank"&gt;http://gltf.waveengine.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During dotNet 2019, on past june, &lt;a href="https://www.youtube.com/watch?v=dzTMsHH5O1w"&gt;we presented our initial support for WebAssembly&lt;/a&gt; (Wasm), showcasing our &lt;a href="https://github.com/WaveEngine/WebGL.NET"&gt;WebGL.NET&lt;/a&gt; library which serves us to draw at a low-level layer. On the following months we worked on refactoring the OpenGL piece into a platform-agnostic &lt;code&gt;WaveEngine.OpenGL.Common&lt;/code&gt; one, from where &lt;code&gt;WaveEngine.WebGL&lt;/code&gt; was born. By the end of the year our visual tests started to pass, and we were ready for testing such in a more real scenario.&lt;/p&gt;

&lt;p&gt;Our current WebGL backend relies on its 2.0 version, which is &lt;a href="https://caniuse.com/#feat=webgl2"&gt;supported by most of the browsers&lt;/a&gt;: the new Edge (based in Chromium), Firefox and Chrome. Although Safari allows to enable WebGL 2.0 through its Experimental Features menu, it is not 100% completed and breaks when running our app. If you are on macOS, please try &lt;a href="https://www.google.com/intl/en_us/chrome/"&gt;Chrome&lt;/a&gt; or &lt;a href="https://www.mozilla.org/en-US/firefox/mac/"&gt;Firefox&lt;/a&gt;; on iOS, it is currently not possible because every browser relies on &lt;a href="https://webkit.org/status/#?search=webgl"&gt;WebKit&lt;/a&gt;, Safari's foundation.&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/LandingScreenshot.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The on-boarding experience&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://gltf.waveengine.net/"&gt;glTF viewer&lt;/a&gt; is a SPA (Single Page Application, a website run on a single page) which works entirely in client side, powered by &lt;a href="https://github.com/mono/mono/tree/master/sdks/wasm"&gt;Mono's support for Wasm&lt;/a&gt;, which will be &lt;a href="https://twitter.com/jcant0n/status/1200388180316446721"&gt;included in .NET 5&lt;/a&gt;. glTF is the nowadays standard for 3D models, and can be viewed on-line by simply drag &amp;amp; dropping such inside —we've included a demo-mode for those without a handy file close. Its main features pack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;support for glTF 2.0 (*) in different flavours: plain glTF, glTF-Binary (.glb) and glTF-Embedded

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0"&gt;here&lt;/a&gt; you can find sample models&lt;/li&gt;
&lt;li&gt;(*) it may happen models fail loading: we are working on making the import process stronger, and would help us if you report us any issue may find (thanks in advance!)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;load .glb files from external links: you can show models to others by just sharing a single link (&lt;a href="https://gltf.waveengine.net/?model=https%3A%2F%2Fraw.githubusercontent.com%2FKhronosGroup%2FglTF-Sample-Models%2Fmaster%2F2.0%2FAvocado%2FglTF-Binary%2FAvocado.glb"&gt;example&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;manipulate the model with mouse or fingers, thinking on mobile devices for this last&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article will visit a few caveats we found during the development, and how we surpassed them finally. We hope you enjoy reading such and, hopefully, will learn something new in between.&lt;/p&gt;

&lt;h2&gt;There is no File System (FS) in the Web&lt;/h2&gt;

&lt;p&gt;That is not actually true. However, that is the point where we found our-selves when began to work on this project: Wave Engine relies on the concept of content, a path in the FS where the assets are placed. Such assets are, in most of the cases, preprocessed in compile-time. When an app starts the assets are ready to be consumed by the engine.&lt;/p&gt;

&lt;p&gt;Thinking on dropping a set of glTF files within a web page, we needed to drive through the content pipeline in order to process the model through our glTF importer. Along with &lt;a href="https://github.com/kjpou1"&gt;Kenneth Pouncey&lt;/a&gt; (thank you!), from Mono, we had already rewrote in C# the Emscripten's tool to build a Virtual FS (VFS), &lt;a href="https://github.com/kjpou1/Mono.WebAssembly.FilePackager"&gt;Mono.WebAssembly.FilePackager&lt;/a&gt;, by specifying a local path; however, how do we write there files coming from the outside? Emscripten has solved this already, by offering a &lt;a href="https://emscripten.org/docs/api_reference/Filesystem-API.html"&gt;FS API&lt;/a&gt; in JavaScript, in a flavour similar to common I/O operations:&lt;/p&gt;

&lt;p&gt;```javascript
function writeToFS(filename, typedArray) {
    // TODO would there be any other way without handling exceptions?
    try {
        FS.stat(DropAbsoluteDirectory);
    } catch (exception) {
        FS.mkdir(DropAbsoluteDirectory);
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let destinationFullPath = DropAbsoluteDirectory + '/' + filename;
let stream = FS.open(destinationFullPath, 'w+');
FS.write(stream, typedArray, 0, typedArray.byteLength, 0);
FS.close(stream);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
```&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This functions writes the bytes at &lt;code&gt;typedArray&lt;/code&gt; into Emscripten's VFS&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Solved this, the next issue we found was how to overcome the glTF files dropped were not processed in any way, and Wave Engine "does not support" reading such on the fly. The quotes are intended, as we do support such: dropping such in the Editor renders the model immediately, but there is some magic underneath.&lt;/p&gt;

&lt;p&gt;We started exploring to consume &lt;code&gt;WaveEngine.Assets&lt;/code&gt; namespace &lt;em&gt;inside&lt;/em&gt; and app, instead of just from the Editor, which was its natural environment. And voilá, it worked! When a .glb file (the single binary format for glTF) is dropped:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is imported by "decompressing" its content (textures, materials, etc.) into the FS, and&lt;/li&gt;
&lt;li&gt;it is exported by generating .we* files ready to be read by Wave Engine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of those files is the actual model, which later is used to instantiate the entire entity hierarchy added to the scene. It is not a heavy process when run on the desktop but, when used from Wasm, it takes some precious seconds. Mono has recently added support for multi-threading but, until such will not be broadly adopted by most common browsers, we still cannot rely on it, although will definitely help us reduce such time, as we currently process items one by one.&lt;/p&gt;

&lt;p&gt;One of the most time and memory consuming tasks above process takes is texture importing, which will cover next.&lt;/p&gt;

&lt;h2&gt;Getting image pixels&lt;/h2&gt;

&lt;p&gt;Of the large bunch of models we have tested those days, the most common textures are made of 2048 x 2048 pixels. When we read such the pixel format is expressed as RGBA, which means 4 bytes per pixel. Thus, if we want to allocate space to read the image in memory we need arrays of 2048 * 2048 * 4 bytes, which is a lot. We have found in some minor cases 8K textures, which make such even worse.&lt;/p&gt;

&lt;p&gt;Allocating memory it-self is not a problem, Wave internally depends on &lt;code&gt;ArrayPool&lt;/code&gt; for importing textures, which at least makes that smoother. Textures are handled by our &lt;code&gt;ImageSharpImporter&lt;/code&gt;, &lt;a href="https://github.com/SixLabors/ImageSharp"&gt;SixLabors' ImageSharp&lt;/a&gt;, which we chose mainly because of its cross-platform feature but, under Wasm, there is a large room open for improvement. With big numbers, decoding a 2048 pixels side image can take more than 10 s, which breaks the experience with no doubt. (We have found also blockers with AOT, but eventually workarounded such by disabling the stripper on their assemblies.)&lt;/p&gt;

&lt;p&gt;How, then, can we read images faster? For our &lt;a href="https://webgldotnet.surge.sh/"&gt;WebGL.NET samples gallery&lt;/a&gt;, our friend Juan Antonio Cano consumed Skia through some initial .NET bindings, and already solved such by taking some hundred ms. However, the current state of &lt;a href="https://github.com/unoplatform/Uno.SkiaSharp"&gt;such bindings&lt;/a&gt;, made by Uno team, were not compatible with vanilla Mono Wasm, thus we looked for an alternative thinking on maintenance in a future. Also important, we only needed the small piece to decode an image, and nothing else.&lt;/p&gt;

&lt;p&gt;It turns out &lt;a href="https://skia.org/user/modules/canvaskit"&gt;CanvasKit&lt;/a&gt; ("Skia in Wasm", quickly), exposed such piece, and has a JavaScript interface. We made some tests in the CanvasKit playground and looked promising. Then, our &lt;code&gt;CanvasKitImporter&lt;/code&gt; was born —replacing ImageSharp one.&lt;/p&gt;

&lt;p&gt;```c-sharp
private JSObject DecodeImage(Stream stream)
{
    if (!stream.CanSeek)
    {
        throw new ArgumentException("The stream cannot be seeked", nameof(stream));
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stream.Seek(0, SeekOrigin.Begin);

JSObject image;

using (var memoryStream = new MemoryStream())
{
    stream.CopyTo(memoryStream);

    using (var array = Uint8Array.From(memoryStream.GetBuffer()))
    {
        image = (JSObject)canvasKit.Invoke("MakeImageFromEncoded", array);
    }
}

return image;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
```&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;CanvasKitImporter.DecodeImage()&lt;/code&gt; passes the underlying byte array to CanvasKit, which decodes the image&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Loading models like &lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/FlightHelmet"&gt;FlightHelmet&lt;/a&gt; took from minutes (15-30) with the tab frozen to less than 20 s. And it still takes too much for us, but we must recall the asset export &amp;amp; import process is untouched from the desktop code. We initially though the &lt;code&gt;ArrayPool.Rent(length)&lt;/code&gt; call was forcing Garbage Collector (GC) to pass and incurring in some seconds but, after isolating such calls, it is not the culprit at all. We still need to investigate here more in depth.&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/FlightHelmetDemoOptimized.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;FlightHelmet model loaded (notice the ilumination)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;To the Web and beyond&lt;/h2&gt;

&lt;p&gt;Not everything is solved: loading time for very big models must be reduced, memory allocation must be decreased too, our WebGL abstraction can be faster as well. Nonetheless, this glTF viewer is our first public project made with Wave Engine 3.0 for the Web.&lt;/p&gt;

&lt;p&gt;We have pursued such during some time but the scenario was still not ready for the jump. Nowadays, we see a bunch of possibilities for helping our customers to take visual experiences into the browser, adding Web to the list of officially supported platforms.&lt;/p&gt;

&lt;p&gt;If you think we can help you reach the Web too, &lt;a href="https://waveengine.net/Company#Contact"&gt;we are here to listen&lt;/a&gt;. Oh, and if you found any issue, please &lt;a href="https://github.com/WaveEngine/Feedback/issues"&gt;report it&lt;/a&gt;. Thank you for reading.&lt;/p&gt;</description>
      <pubDate>Thu, 06 Feb 2020 23:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=2019-8-2</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>The 'last' Visual Test #WaveEngine #WebGL #Wasm</title>
      <description>&lt;p&gt;Today we've reached a mid-term goal with our port of Wave Engine to WebGL: "every" visual test we agreed is currently
running —between quotes because the stencil one actually doesn't, and we need to go for a second round as we enabled
texture storage in the middle.&lt;/p&gt;

&lt;p&gt;This' for instance the last one:&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/FrameBufferTextureCubeTest.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;At the beginning of the week I worked on passing a ReadOnlySpan&amp;lt;byte&amp;gt; to a few WebGL calls —as Juan recommended us
through Twitter. I started touching the transpiler, WebIDLToCSharp, but quickly noticed it wasn't worth as needs a
somewhat big change while such can be done at the backend side. Also, I'm not 100% sure will find any other approach
which's still better in performance.&lt;/p&gt;

&lt;p&gt;With the last visual test we've gotten ~30 fps so thinking on AOT is becoming a must. I'd like to research on this
sooner or later.&lt;/p&gt;</description>
      <pubDate>Thu, 01 Aug 2019 22:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=2019-7-26</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Wave Engine &amp; WebGL.NET status</title>
      <description>&lt;p&gt;After some months working on
&lt;a href="https://github.com/WaveEngine/WebGL.NET"&gt;WebGL.NET&lt;/a&gt; this Wednesday we've
finally created the first NuGet. I've been personally avoiding doing this
because we rely on some Mono's NuGets which are not public so anyone adding ours
will get a bunch of errors.&lt;/p&gt;

&lt;p&gt;However, we neeed such. Wave Engine was consuming WebGL through a submodule
inside a submodule and such dependency was breaking flow to some of my
workmates. I discussed this with Dani and found a medium-term solution:
- creating a private feed on Azure DevOps and put every Mono dependency there
  isolated, and
- publish WebGL.NET under preview and alert on above in a noticeable place -I
  think still noone has still used such but there it's :-)&lt;/p&gt;

&lt;p&gt;Also, I discovered this &lt;a href="http://deat.tk/jazz2/wasm/"&gt;game&lt;/a&gt; which's using our
project from sources and even have evolved it in some places. If people can
consume it through NuGet I believe will report issues back and we all can gain
from that. Eric Mellino's done something similar too, and provided good issues
:-)&lt;/p&gt;

&lt;p&gt;So, the NuGet is just there and it works. I must say we're close to complete
every low-level Wave Engine visual test on Wasm so it reforces the idea of
having WebGL.NET somewhat stable.&lt;/p&gt;

&lt;p&gt;Working on 2D &amp;amp; 3D textures this week I've written once and again this portion:
```csharp
IntPtr data = [...] // Imagine a large chunk of bytes
var colors = new byte[length];
Marshal.Copy(data, colors, colors.Length);&lt;/p&gt;

&lt;p&gt;GL.TexImage2D([...], colors);
```&lt;/p&gt;

&lt;p&gt;, and, obviously, this should be done &lt;em&gt;inside&lt;/em&gt; our binding, exposing a new
overload for passing pixels as &lt;code&gt;IntPtr&lt;/code&gt;. Actually OpenGL/ES does something
similar too.&lt;/p&gt;

&lt;p&gt;Today Miguel de Icaza has told us in Twitter Mono's Wasm bits will be launched
by the end of the year and that's great. Still the development workflow is rough
but for sure this will improve; however, even in this way, Wasm is a great
platform to target because of the browser-based and native execution tuple.&lt;/p&gt;</description>
      <pubDate>Thu, 25 Jul 2019 22:00:00 Z</pubDate>
    </item>
  </channel>
</rss>