<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Marcos Cobeña Morián</title>
    <link>https://marcoscobena.com/</link>
    <description>Marcos' Blog</description>
    <managingEditor>marcoscobena@outlook.com (Marcos Cobeña Morián)</managingEditor>
    <lastBuildDate>Thu, 07 Mar 2024 09:28:26 Z</lastBuildDate>
    <item>
      <link>https://marcoscobena.com/?i=wolfenstein3d</link>
      <author>marcoscobena@outlook.com (Marcos Cobeña Morián)</author>
      <title>Wolfenstein 3D</title>
      <description>&lt;p&gt;&lt;img src="items/images/wolfenstein3d.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I do not know what I discovered first: whether Fabien Sanglard's black books or his blog.
Anyway, I was absolutely in with how Wolfenstein 3D was made,
and started to try reproducing its engine by 2019.
After a failed attempt, and a gap of 4 years, I finally got it!
The room where you can move is our current storey at Plain Concepts Sevilla :-) Click &lt;a href="https://marcoscobena.com/wolfenstein3d"&gt;here&lt;/a&gt; to play!&lt;/p&gt;

&lt;p&gt;|            |                                           |
| ---------- | ----------------------------------------- |
| Language   | C# (.NET), JavaScript, HTML, CSS          |
| Frameworks | Mono's WebAssembly Runtime                |
| Platforms  | WebAssembly                               |
| Date       | January-February 2024                     |
| More info? | &lt;a href="https://fabiensanglard.net/gebbwolf3d/"&gt;https://fabiensanglard.net/gebbwolf3d/&lt;/a&gt;  |&lt;/p&gt;</description>
      <pubDate>Tue, 05 Mar 2024 00:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=software-publico</link>
      <author>marcoscobena@outlook.com (Marcos Cobeña Morián)</author>
      <title>Software público</title>
      <description>&lt;p&gt;Mi hijo mayor nació en un hospital público, en plena pandemia de Coronavirus. Esto provocó que no pudiésemos recibir visitas los días que estuvimos allí, aislándonos casi todo el día en una misma habitación. Me pasé horas observando cómo era aquella habitación, y me pareció que había cierta similitud con el software.&lt;/p&gt;

&lt;p&gt;El hospital se construyó hace décadas (los 50 quizá), y se ha mantenido y mejorado hasta nuestros días. Como el software. En la habitación había paredes de una época, suelos de otra, ventanas de otra, mezcla de todas ellas. Como en el software. El cuarto de baño, en concreto, tenía el lavabo de un modelo, el váter de otro, el aplique que sostenía el papel higiénico de una época, el espejo de otra, etc. Como en el software. Para mí, como usuario, todo era muy heterogéneo. ¡Pero cumplía bastante bien su función! A diferencia del software, creo que es infinitamente más complejo mantener un hospital que una base de código fuente.&lt;/p&gt;

&lt;p&gt;Recuerdo que pensé por qué nos obsesionamos tanto en el software con el Diseño, por qué una web de la Administración Pública me parece mucho peor que otra de una empresa privada sola y exclusivamente por su Diseño. Cuando casi con total seguridad la primera me es mucho más útil que la segunda, como ciudadano y ser humano. Quizá he perdido la capacidad crítica para priorizar la función a la forma. Quizá el Diseño sea sumamente importante y yo aún no sé verlo.&lt;/p&gt;

&lt;p&gt;Hace poco he terminado de leer Patterns of Software (Richard P. Gabriel), recomendado por Federico Mena Quintero, a colación de sus artículos relacionados con la calidad sin un nombre. ¡Y me ha cambiado el punto de vista! Apoyado por el trabajo del arquitecto Christopher Alexander, Richard Gabriel ve el software para nosotros, los desarrolladores, como si lo habitásemos, como si nuestra casa fuese su código fuente. El libro me ha encantado. Tanto, que sigo con A Patterns Language, del mismo arquitecto.&lt;/p&gt;</description>
      <pubDate>Tue, 27 Feb 2024 00:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=../README</link>
      <author>marcoscobena@outlook.com (Marcos Cobeña Morián)</author>
      <title>README</title>
      <description>&lt;h1&gt;A.m.e.d.i.o.&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;From &lt;a href="https://github.com/MarcosCobena/marcoscobena.github.io"&gt;https://github.com/MarcosCobena/marcoscobena.github.io&lt;/a&gt; to &lt;a href="https://marcoscobena.com"&gt;https://marcoscobena.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This may be the number n blog engine I have written. It could start on around 2000 with PHP?, until I learned C# and all the rest were written in such. There is something magical in using your own stuff, maybe similar to wood-working. First versions were named Amelio, as a joke of the cartoon Marco whose mate was the monkey Amedio (it was years since I noticed Amelio was misspelled). I named this one Amedio as well by 2017 but, as soon as I noticed was not interested in distributing it for others, I removed that README and simply iterated it following my own joy.&lt;/p&gt;

&lt;h1&gt;How it is made&lt;/h1&gt;

&lt;p&gt;I like Markdown, JavaScript and running stuff on browsers (client side), so what you are reading is:
- a Markdown file
- fetched from the server
- transformed into HTML, and
- dinamically injected into the index.html&lt;/p&gt;

&lt;p&gt;That is all. I learned this approach by reading the source code of www.darkwater.info a long time ago. Every item/post is listed in the form of a function call at items.js, and index.js makes the work from above. You can see items.js as a database, created locally in your browser, which is queried on demand.&lt;/p&gt;

&lt;h1&gt;Features&lt;/h1&gt;

&lt;p&gt;Let me try collecting everything currently supported:
- two types of entries: items (pages) and blog posts
- list of latests blog posts: both titles and full text
- blog archive view by
    - years and months
    - tags
- RSS generation: this is the only piece written in C#, simply call &lt;code&gt;dotnet run --project .\RSS\RSS.csproj&lt;/code&gt; at root and it will output feed.rss ready to publish
- URL redirections&lt;/p&gt;

&lt;p&gt;These features are supported as well but I am not using them nowadays (however, you can navigate the repo back in time and you will find some examples):
- podcast: in the form of a third type of entry, you can add episodes along with their audio files
- list of latests Mastodon posts&lt;/p&gt;

&lt;h1&gt;Work in progress&lt;/h1&gt;

&lt;p&gt;These are the features which I have started working on (see the features branches):
- dark theme
- test engine
- navigation bar (side menu)&lt;/p&gt;

&lt;h1&gt;Import from other engines&lt;/h1&gt;

&lt;p&gt;Because I needed them for my-self, I wrote the following exporters to Markdown:
- &lt;a href="https://github.com/MarcosCobena/MediumExportToMarkdown"&gt;Medium&lt;/a&gt;
- &lt;a href="https://github.com/MarcosCobena/WordPressExportToMarkdown"&gt;WordPress&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Close-up&lt;/h1&gt;

&lt;p&gt;My workmate &lt;a href="https://carnero.net"&gt;Carnero&lt;/a&gt; told me he was writting his own blog engine from scratch, and it lifted my energy to write this post so, it is dedicated to him. It may serve for others as well, feel free to fork the repo and adapt it to your needs.&lt;/p&gt;</description>
      <pubDate>Sat, 17 Feb 2024 00:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=portfolio-2023</link>
      <author>marcoscobena@outlook.com (Marcos Cobeña Morián)</author>
      <title>Portfolio -2023</title>
      <description>&lt;h1&gt;Brain&lt;/h1&gt;

&lt;p&gt;&lt;img src="items/images/brain.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This mobile app blends a lot of cutting-edge technologies:
Evergine, ChatGPT, MAUI, Speech to Text &amp;amp; Text to Speech, lip-sync, Azure, etc.
I worked on both backend and frontend sides.
For the first, I started with Test-Driven Development (TDD):
it orchestrates the dialogues between the user and ChatGPT and, it is critical.
For the other, I built from scratch a good portion of the app, mainly XAML &amp;amp; ViewModels.
We spent a &lt;a href="?i=conferences"&gt;talk&lt;/a&gt; about this project at Monkey Conf 2023.&lt;/p&gt;

&lt;p&gt;|            |                              |
| ---------- | ---------------------------- |
| Language   | C# (.NET)                    |
| Frameworks | Evergine, MAUI, ASP.NET Core |
| Platforms  | Android, iOS                 |
| Date       | May-September 2023           |
| More info? | &lt;a href="https://www.thera4all.com"&gt;https://www.thera4all.com&lt;/a&gt;  |&lt;/p&gt;

&lt;h1&gt;CITYPLAIN&lt;/h1&gt;

&lt;p&gt;&lt;img src="items/images/cityplain.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Back on early 2020, I created a demo project to convince our customer we could create such a powerful 3D editor in the browser.
The project went in, and I worked on the first iterations:
from connecting Wave Engine with React,
to loading DXF files from AutoCad for importing their geometry,
going through rendering 3D text.
On 2022 I have been back on track, drawing static maps and exporting georeferenced geometry to shapefiles (which you can import on Google Earth, for instance).&lt;/p&gt;

&lt;p&gt;|            |                                                 |
| ---------- | ----------------------------------------------- |
| Language   | C# (.NET), JavaScript                           |
| Frameworks | Wave Engine, Mono's WebAssembly Runtime, Blazor |
| Platforms  | WebAssembly                                     |
| Date       | October-November 2022                           |
| More info? | &lt;a href="https://www.cityplain.com"&gt;https://www.cityplain.com&lt;/a&gt;                     |&lt;/p&gt;

&lt;h1&gt;Project Paidia&lt;/h1&gt;

&lt;iframe height="400" src="https://ms-athens-playground-dev-egl-aot.azurewebsites.net/" style="display: block; margin: 0 auto;" width="640"&gt;&lt;/iframe&gt;

&lt;p&gt;This small game bundles some interesting technologies: an ONNX Neural Network running on JavaScript, consumed by the game it-self on Wave Engine.
I applied Test-Driven Development to figure out the game logic, built on top of &lt;a href="http://zalods.blogspot.com/2018/11/simple-yet-powerful-fsm-implementation.html"&gt;Zalo's state machine implementation&lt;/a&gt;.
My friend, and boss, Javi Cantón invited me to talk a little bit about this project at &lt;a href="https://www.youtube.com/watch?v=Qz4sEGv1PUQ"&gt;Singularity 2020's Research Team session&lt;/a&gt;.
Tap above to play!&lt;/p&gt;

&lt;p&gt;|            |                                                                   |
| ---------- | ----------------------------------------------------------------- |
| Language   | C# (.NET), JavaScript, HTML, CSS                                  |
| Frameworks | Wave Engine, Mono's WebAssembly Runtime                           |
| Platforms  | WebAssembly                                                       |
| Date       | April-May 2020                                                    |
| More info? | &lt;a href="https://innovation.microsoft.com/en-us/exploring-project-paidia"&gt;https://innovation.microsoft.com/en-us/exploring-project-paidia&lt;/a&gt; |&lt;/p&gt;

&lt;h1&gt;Wave Engine's on-line glTF viewer&lt;/h1&gt;

&lt;p&gt;&lt;img src="items/images/FlightHelmetDemoOptimized.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Our first public product/experiment with Wave Engine Web was this glTF viewer.
This time, I worked alone on it with close support from my mates focused on the engine's core.
Its most difficult task was to decrease the model loading time, where textures were taking too much —order of minutes.
I wrote about how we overcame that, among other things, &lt;a href="https://marcoscobena.com/?i=wave-engines-on-line-gltf-viewer"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;|            |                                         |
| ---------- | --------------------------------------- |
| Language   | C# (.NET), JavaScript, HTML, CSS        |
| Frameworks | Wave Engine, Mono's WebAssembly Runtime |
| Platforms  | WebAssembly                             |
| Date       | December 2019-January 2020              |
| More info? | &lt;a href="http://gltf.waveengine.net"&gt;http://gltf.waveengine.net&lt;/a&gt;            |&lt;/p&gt;

&lt;h1&gt;WebGL.NET&lt;/h1&gt;

&lt;p&gt;&lt;img src="items/images/WebGLDotNET.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;With the goal of enabling &lt;a href="https://waveengine.net/"&gt;Wave Engine&lt;/a&gt; in the web, my mate
&lt;a href="https://twitter.com/jacano35"&gt;Juan&lt;/a&gt; &amp;amp; I started exploring how such could be done with current
&lt;a href="https://github.com/mono/mono/tree/master/sdks/wasm"&gt;Mono's WebAssembly&lt;/a&gt; support. It looked promising, so I switched
to full-time work on a bindings set to serve as the low-level WebGL layer for Wave. I really enjoyed writting the
transpiler with ANTLR, which auto-generates the C# bindings from the official Khronos' specification.&lt;/p&gt;

&lt;p&gt;|            |                                                                                    |
| ---------- | ---------------------------------------------------------------------------------- |
| Language   | C# (.NET)                                                                          |
| Frameworks | Mono's WebAssembly Runtime, ANTLR                                                  |
| Platforms  | WebAssembly                                                                        |
| Date       | June-October 2019                                                                  |
| More info? | &lt;a href="https://github.com/WaveEngine/WebGL.NET"&gt;https://github.com/WaveEngine/WebGL.NET&lt;/a&gt; |&lt;/p&gt;

&lt;h1&gt;Time Attendance&lt;/h1&gt;

&lt;p&gt;&lt;img src="items/images/TimeAttendance.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;During some months our apps team at Plain Concepts have been working on this Xamarin.Android project
for MAPAL, a spanish company which provides attendance control solutions focused on restaurants and
similar. The key point here was to build the entire product, including a custom ODROID tablet, and
make all work in the immersive mode (no one should see Android below). I'm particularly proud of the
actual timeline control, which was made entirely through Android's drawing API.&lt;/p&gt;

&lt;p&gt;|            |                                                          |
| ---------- | -------------------------------------------------------- |
| Language   | C# (.NET)                                                |
| Frameworks | Xamarin.Android                                          |
| Platforms  | Android                                                  |
| Date       | February-May 2019                                        |
| More info? | &lt;a href="https://mapalsoftware.com/"&gt;https://mapalsoftware.com/&lt;/a&gt; |&lt;/p&gt;

&lt;h1&gt;Tailwind Traders&lt;/h1&gt;

&lt;p&gt;&lt;img src="items/images/TailwindTraders.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This year Microsoft Connect(); 2018 event presented Xamarin.Forms 4 cycle showcased through our Tailwind Traders app. Such was conceived from scratch and introduced Shell along with its fly-out menu. I'd highlight how much care we took into almost every aspect of the solution: enforced XAML policies, minimalistic MVVM framework, feature toggling through its settings, beautiful shadows, etc.&lt;/p&gt;

&lt;p&gt;|            |                                                                                                            |
| ---------- | ---------------------------------------------------------------------------------------------------------- |
| Language   | C# (.NET)                                                                                                  |
| Frameworks | Xamarin.Forms                                                                                              |
| Platforms  | Android, iOS                                                                                               |
| Date       | December 2018                                                                                              |
| More info? | &lt;a href="https://github.com/Microsoft/TailwindTraders-Mobile"&gt;https://github.com/Microsoft/TailwindTraders-Mobile&lt;/a&gt; |&lt;/p&gt;

&lt;h1&gt;Ges Seguros&lt;/h1&gt;

&lt;p&gt;&lt;img src="items/images/GesSeguros.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;For a new iteration over the existing app, I worked adding some more functionality. This project doesn't bundle a highly customized UI, but's pretty large in the amount of views. I've taken the chance to refactor mostly at XAML side: taking controls out to avoid repetition, establishing bases for fonts styles, etc. I was in charge too of recovering the CI/CD environment, layed in App Center.&lt;/p&gt;

&lt;p&gt;|            |                                                                                                                                                        |
| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |
| Language   | C# (.NET)                                                                                                                                              |
| Frameworks | Xamarin.Forms                                                                                                                                          |
| Platforms  | Android, iOS                                                                                                                                           |
| Date       | September 2018                                                                                                                                         |
| More info? | &lt;a href="https://play.google.com/store/apps/details?id=com.ges.mobile"&gt;Google Play&lt;/a&gt;&lt;br /&gt;&lt;a href="https://itunes.apple.com/es/app/ges-seguros/id1314860753"&gt;App Store&lt;/a&gt; |&lt;/p&gt;

&lt;h1&gt;Snip Insights&lt;/h1&gt;

&lt;p&gt;&lt;img src="items/images/SnipInsights.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Starting from &lt;a href="https://www.microsoft.com/en-us/garage/profiles/snip-insights/"&gt;Microsoft Garage's original app&lt;/a&gt;, we developed a Xamarin.Forms port for macOS &amp;amp; Linux —and Windows too, although didn't use it finally because of a Gtk# bug with DPIs. The biggest challenge was to build a modern UI with Xamarin.Forms' Gtk# backend where there's no transparencies, for instance. I particularly enjoyed &lt;a href="https://gist.github.com/MarcosCobena/b4768bacc1a112a4f38a9d11a19f1251"&gt;workaround&lt;/a&gt;ing a &lt;a href="https://github.com/mono/gtk-sharp/issues/236"&gt;crash&lt;/a&gt; under macOS when taking screenshots, because had to bind some Apple's Core Graphics APIs, and glue this altogueter back to Gtk#.&lt;/p&gt;

&lt;p&gt;|            |                                                                                                                                                                                                                       |
| ---------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Language   | C# (.NET)                                                                                                                                                                                                             |
| Frameworks | Xamarin.Forms, Gtk#, Xamarin.Mac                                                                                                                                                                                      |
| Platforms  | macOS, Linux                                                                                                                                                                                                          |
| Date       | August 2018                                                                                                                                                                                                           |
| More info? | &lt;a href="https://github.com/Microsoft/ailab/tree/master/Snip-Insights"&gt;https://github.com/Microsoft/ailab/tree/master/Snip-Insights&lt;/a&gt; (source code; releases can be found &lt;a href="https://github.com/Microsoft/ailab/releases"&gt;here&lt;/a&gt;) |&lt;/p&gt;</description>
      <pubDate>Wed, 20 Dec 2023 00:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=como-desarrollar-software</link>
      <author>marcoscobena@outlook.com (Marcos Cobeña Morián)</author>
      <title>Cómo desarrollar software</title>
      <description>&lt;p&gt;Si tuviese la oportunidad de añadir un capítulo al libro Cómo vivir (Derek Sivers) pero, centrado en el desarrollo de software, sería algo así:&lt;/p&gt;

&lt;p&gt;Estima una sola vez y comprométete a una fecha de entrega. Pase lo que pase, haz lo que dijiste que ibas a hacer y no te salgas de ahí. Si necesitas más tiempo, echa más horas, trabaja las tardes, noches o fines de semana si hace falta, pero nunca te pases de la fecha acordada.&lt;/p&gt;

&lt;p&gt;No hagas tests, no pierdas el tiempo; dedica todo tu esfuerzo a escribir código que el cliente pueda probar.&lt;/p&gt;

&lt;p&gt;No le enseñes el software al cliente hasta el final, si lo ve a mitad no hará más que confundirlo y será peor.&lt;/p&gt;

&lt;p&gt;No planifiques, hay que hacerlo todo, así de sencillo. No inviertas tiempo en liturgias; en su lugar, escribe código que acerque el software a su completitud.&lt;/p&gt;

&lt;p&gt;Así es como se desarrolla software.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Estima tantas veces como sea necesario. La realidad cambia a medida que avanzan los proyectos, el cliente sabe mejor lo que quiere a medida que avanza.&lt;/p&gt;

&lt;p&gt;Haz todos los tests que sea posible, mientras más mejor. Así, si haces cualquier cambio, te darás tú cuenta antes del error que el cliente, y podrás corregirlo.&lt;/p&gt;

&lt;p&gt;No te comprometas a una fecha de entrega, nadie sabe qué va a ocurrir hasta entonces. Si necesitas más tiempo, evalúa la situación, busca términos medios y sigue avanzando. Nunca trabajes más horas de las necesarias.&lt;/p&gt;

&lt;p&gt;Enséñale al cliente cómo vas en cada momento. Enséñale a probar el software tal como está, y enséñale también a reportar errores o simplemente dar feedback. Enséñale a hacerlo él mismo.&lt;/p&gt;

&lt;p&gt;Así es como se desarrolla software.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Esta constante es ¿local o global?&lt;/p&gt;

&lt;p&gt;const int maxInteractions = 3;&lt;/p&gt;</description>
      <pubDate>Tue, 15 Aug 2023 00:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=2022</link>
      <author>marcoscobena@outlook.com (Marcos Cobeña Morián)</author>
      <title>Frustated 2022 recap</title>
      <description>&lt;p&gt;After reading &lt;a href="https://danigm.net/2022.html"&gt;Dani’s year recap&lt;/a&gt;, I have felt the need to write mine down too.&lt;/p&gt;

&lt;p&gt;However, I am not right now as creative as I would like; instead, I have came up with this list of intents which I will not achieve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shut my-self up more often during video calls: better listen what others have to say&lt;/li&gt;
&lt;li&gt;Less Google, more documentation: I want to achieve great things in the long-term, not today nor tomorrow&lt;/li&gt;
&lt;li&gt;Refactor first or after, not in the middle: no more bloated commits&lt;/li&gt;
&lt;li&gt;Wake up earlier! Somewhat difficult with two babies :-)&lt;/li&gt;
&lt;li&gt;More writting thoughts down: I think have found Mastodon really helpful here, but still exploring it&lt;/li&gt;
&lt;li&gt;Accept I can not change a lot of things: appreciate I can change a really small subset&lt;/li&gt;
&lt;li&gt;Focus on what I can change, trust on others taking care of the rest: I suffer a lot of “it will fail if I do not manage it my-self”&lt;/li&gt;
&lt;li&gt;Read more to fall in love with problems: it makes the road a joy, and sometimes you solve them&lt;/li&gt;
&lt;li&gt;Do not stay sit down periods longer than 1 h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s it.&lt;/p&gt;</description>
      <pubDate>Sun, 01 Jan 2023 00:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=git-interactively-rebase</link>
      <author>marcoscobena@outlook.com (Marcos Cobeña Morián)</author>
      <title>Por una git-arra con menos cuerdas</title>
      <description>&lt;p&gt;Imagínate: has terminado de trabajar en tu propia rama y llegó la hora de llevar todos los cambios a la rama de origen. ¿Qué sueles hacer en ese caso? Yo, hasta hace unos meses, hacía merge tal cual y listo. Todos los commits de mi rama temporal pasaban a la de origen. Y se añadía una "cuerda" más a la guitarra (trabajo en proyectos donde ni el propio Jimi Hendrix se hubiese apañado bien).&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/git-commits-flow.png" alt="" /&gt;
&lt;em&gt;Histórico de commits típico (&lt;a href="https://fork.dev/blog/posts/collapsible-graph/swift-show-all.png"&gt;fuente&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mi compañero de squad, Gabriel (¡gracias tío!), me llevó a la siguiente reflexión: ¿para qué quieres conservar todos los commits, no sería mejor agruparlos según el valor final para el proyecto? Un ejemplo: la rama feature/x, sacada de master, tiene los siguientes commits (más nuevos primero):
- fix
- add Wasm support
- wip&lt;/p&gt;

&lt;p&gt;¿Qué valor tiene fix, o wip, cuando termine mi feature/elimine mi rama? Quizá haya casos en los que sí pero, en la mayoría que me he encontrado personalmente, lo que realmente aporta valor es agrupar todos esos commits en uno único que se llame "add Wasm support": 1) los cambios están autocontenidos y 2) no añadimos una nueva cuerda.&lt;/p&gt;

&lt;p&gt;En mi caso uso Fork, y tan solo tienes que:
1. estando en tu rama, hacer click con el botón derecho sobre el commit de la cual nació;
2. seleccionar Interactively Rebase 'tu-rama' to Here...;
3. se abrirá un diálogo donde, de forma muy intuitiva, podrás jugar con los commits a gusto;
4. después tendrás que hacer force push (para sobreescribir tu rama en origin) y, finalmente,
5. desde la rama de origen, hacer pull con fast-forward&lt;/p&gt;

&lt;p&gt;Seguro que en otros clientes de Git es similar.&lt;/p&gt;

&lt;p&gt;Es complicado llegar al origen de un bug. Es complicado mantener a la vez varias releases en producción. Es complicado encontrar la aguja (commit) en un pajar (histórico). Con pequeños gestos como este nos hacemos todos la vida más fácil. Y podemos invertir el tiempo donde realmente aporta valor.&lt;/p&gt;</description>
      <pubDate>Fri, 23 Sep 2022 00:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=haz-tests</link>
      <author>marcoscobena@outlook.com (Marcos Cobeña Morián)</author>
      <title>Haz tests</title>
      <description>&lt;p&gt;&lt;strong&gt;Resumen:&lt;/strong&gt; haz tests. En vez de tanto depurar, haz un test. Cuando tengas un bug, reprodúcelo con un test (¡y corrígelo!) Yo he tardado diez años en darme cuenta, no te quieras parecer a mí en eso :-)&lt;/p&gt;

&lt;p&gt;Los tests son una herramienta para, de forma aislada, probar una porción de código. Hay de muchos tipos: integración, regresión, UI, etc., pero a todos les suele seguir la palabra unitarios, porque su objetivo es probar una única cosa. No quiero ser exhaustivo con ésto, me conformo con tests, a secas. De cómo hacer tests está lleno Internet de tutoriales, pero tampoco me quiero meter ahí. Si tienes interés en aprender a hacerlos seguro sabes cómo encontrarlos. Yo quiero que tengas interés.&lt;/p&gt;

&lt;h2&gt;Mirando a otro lado&lt;/h2&gt;

&lt;p&gt;La primera vez que supe de los tests fue en cuarto de carrera. En Ingeniería del Software (II, creo). Rafael Corchuelo nos daba esta asignatura. Yo tenía veintiún o veintidos años por entonces. El temario usaba una API de un banco ficticio para probar que sus llamadas devolvían lo que debían. Recuerdo que Rafael nos preguntó en clase qué diferencia había entre probar y demostrar, porque nuestro objetivo con los tests es probar.&lt;/p&gt;

&lt;p&gt;Nunca más volví a echar cuenta a los tests hasta los treinta y pico. Todos estos años he seguido teniendo a mi amigo Juanma Laó Ramos al lado, que sí vió la importancia de esto mucho más temprano, pero, como un impermeable al agua, pasé de largo sin mojarme. Creo que hace unos años tenía la [errónea] sensación de que los tests era una moda. Y no me quería unir a ella. Creía que un buen programador es aquel que vive por y para la programación, usa bytes en lugar de enteros para los bucles y escribía código críptico. Y yo me esforzaba por ser así.&lt;/p&gt;

&lt;p&gt;Si bien las cagadas que he tenido en estos años no se hubiesen subsanado 100% con tests, sí me hubiesen supuesto una gran ayuda para escribir software más sólido y más fácil de mantener para el siguiente (que, a veces, vuelvo a ser yo).&lt;/p&gt;

&lt;h2&gt;Una forma mejor de depurar&lt;/h2&gt;

&lt;p&gt;En DevsDNA nos propusimos leer un trozo de un libro, y comentarlo después. Alguien escogió &lt;a href="https://www.amazon.es/Software-Craftsman-Professionalism-Pragmatism-Robert-ebook/dp/B00QXAGIDO"&gt;A Software Craftsman, de Sandro Mancuso&lt;/a&gt;. Ahí leí por primera vez que los tests, como otra herramienta más para escribir software, era comparable a la depuración. Hoy día, casi todo lo que construímos es depurable fácilmente: pones un puntito rojo en la línea donde quieres detenerte, ejecutas la aplicación, la llevas hasta el punto que te interesa y ¡ta-chán!, puedes pasar el ratón por el código para ver el valor de las variables. No hace mucho atrás (o si has trabajado con los inicios de .NET en WebAssembly :-) ), tenías que usar &lt;code&gt;printf()&lt;/code&gt;. Es un salto cualitativo, ¿no?&lt;/p&gt;

&lt;p&gt;En el libro leí que la gente que usa tests, escogían estos a la depuración. ¿Cómo? Pero si escribir tests lleva su tiempo y poner un puntito es inmediato... El truco está en el punto de vista:
- los breakpoints son muy rápidos de poner (un click), pero llevar la app al estado que te interesa depende: puede que tengas suerte y quieras verificar algo nada más arrancar, o puede que tengas que iniciar sesión, navegar dos veces, esperar a una push que envías desde otro dispositivo, etc; los tests no son tan rápidos de escribir, pero llevar la app al estado que te interesa, ahora sí, es inmediato: ejecuta el test y listo;
- los breakpoints están en tu máquina, en tu IDE: ni llegan al repositorio, ni por tanto se mantienen en el tiempo, te valen solo a ti; los tests acaban en el repositorio, lo disfrutan los demás, el equipo, y se mantienen en el tiempo para no volver atrás (además, es otra forma de documentación)
- un breakpoint se pone una vez y depuras n veces; un test se escribe una vez y lo ejecutas n veces&lt;/p&gt;

&lt;p&gt;A veces, no podemos hacer un test: por ejemplo, quiero probar algo concreto de la plataforma, como me ocurre con Xamarin.Forms, y no tengo un entorno de testing donde echarlo a andar (que podría). Los tests no son la bala de plata, pero son una gran herramienta.&lt;/p&gt;

&lt;h2&gt;Sé que esto no funciona&lt;/h2&gt;

&lt;p&gt;Cuando comencé a hacer tests en aquellos proyectos donde no había ninguno, una sensación que tuve (y sigo teniendo) es lo poco agradable que es saber con certeza que tienes código que no funciona, aunque todavía no ha fallado en producción. Da hasta un poquito de miedo. Cuando no tenía tests, intuía que funcionaba, y no tenía ningún bug que me indicase lo contrario. Ahora sé, por mí mismo, que algo está mal.&lt;/p&gt;

&lt;p&gt;Creo que lidiar con esta sensación es un pequeño escalón que tenemos que superar si decidimos apostar por los tests. La felicidad de la ignorancia siempre será peor. Esto ocurre tanto en los tests como en la vida misma. Si no sabes que algo está roto, ¿cómo lo vas a corregir?&lt;/p&gt;

&lt;p&gt;Cuando vives al margen de los tests, programas por intuición: sé que esto ha funcionado hoy, intuyo que lo seguirá haciendo mañana. Si tu proyecto es muy muy pequeño, una demo, es poco costoso corroborar la intuición: vuelves a probar tú mismo todo, y listo. Pero con poco que se salga de ahí, estás jodido: no conozco a ningún programador que, al avanzar en un proyecto, siempre pruebe todos los casos de uso que, al menos él/la, ha desarrollado. Nadie hace esto. Bueno, sí, el cliente :-)&lt;/p&gt;

&lt;h2&gt;El placer de avanzar sobre suelo firme&lt;/h2&gt;

&lt;p&gt;Por otro lado, tocar una base de código y, al final, ver que todos los tests pasan en verde, es el aloe vera de la quemazón después de un día al sol. Sabes que, al menos, no te has cargado algunas partes del código. Si tienes suerte y hay tests de lo más primordial, tienes una buena probabilidad de haber construído sobre suelo firme.&lt;/p&gt;

&lt;p&gt;También puede ser la excusa perfecta: como los tests pasan en verde, todo funcionará a la perfección. ¡Eeerrooor! No nos vamos a ir al otro extremo tampoco, seamos razonables: la lectura correcta sería "lo que he tocado no ha roto lo que está probado". Y, ésto, es mucho. Si somos inteligentes y test-eamos los puntos más críticos, y si añadimos tests de regresión para que un bug no vuelva a ocurrir, tenemos una buena probabilidad de conservar el aprecio que un cliente puede llegar a tener sobre nosotros.&lt;/p&gt;

&lt;p&gt;Al final, y como dice Juanma, quiero ser feliz. Quiero que mis clientes, tengan más dinero o menos, sean más grandes o más pequeños, tengan una solución mejor a sus problemas hoy y, más importante, mañana. No pensar en el mañana es lo que me alejaba de hacer tests.&lt;/p&gt;</description>
      <pubDate>Wed, 19 May 2021 00:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=design-follows-logic</link>
      <author>marcoscobena@outlook.com (Marcos Cobeña Morián)</author>
      <title>Design follows logic</title>
      <description>&lt;p&gt;I have learnt it is way better to close logic before design when you are about to start a task.&lt;/p&gt;

&lt;p&gt;Imagine you need to create a log-in page. If you start laying the design out, it is possible to run out of time —from the estimation— and still the functionality is missing. If an user would need to use it, it is simply not there. However, if you start with logic and, run out of time, the user at least can solve her need, although it is not the most beautiful log-in she has seen. Both can then decide whether to invest some more time.&lt;/p&gt;

&lt;p&gt;Fist logic, business needs, Acceptance Criteria, functionality; second design, layout, style. Form follows function, not the other way around.&lt;/p&gt;</description>
      <pubDate>Tue, 16 Feb 2021 00:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=creativity-inc</link>
      <author>marcoscobena@outlook.com (Marcos Cobeña Morián)</author>
      <title>Creativity, Inc.</title>
      <description>&lt;p&gt;&lt;img src="items/images/CreativityInc.jpg" alt="Creativity, Inc. book cover" /&gt;
&lt;em&gt;&lt;a href="https://archive.org/details/creativityincove0000catm/"&gt;Creativity, Inc.: overcoming the unseen forces that stand in the way of true inspiration&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have read it as a Software Engineer, a programmer, convinced there are still plenty of problems to solve in our daily job. Also, as that boy who still remembers how was the day I watched Toy Story for the first time.&lt;/p&gt;

&lt;p&gt;Like them (Pixar), the software it-self is not the primary value, but what it actually generates on people who use it. They look for making people happier with their stories, we look for solving people's problems with our products, thus making them happier. And we are more or less good solving things inside the computer; however, we lack knowledge to solve those out of it.&lt;/p&gt;

&lt;p&gt;It has been trully inspiring for me. And, at the end, there is a beautiful gift for those who appreaciate Steve Jobs —and have read a few of his biographies.&lt;/p&gt;</description>
      <pubDate>Thu, 08 Oct 2020 00:00:00 Z</pubDate>
    </item>
  </channel>
</rss>